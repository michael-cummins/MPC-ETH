%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Copyright (c) 2023, Amon Lahr, Simon Muntwiler, Antoine Leeman & Fabian Fl√ºrenbrock Institute for Dynamic Systems and Control, ETH Zurich.
%
% All rights reserved.
%
% Please see the LICENSE file that has been included as part of this package.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [tuning_struct, i_opt] = lqr_tuning(x0,Q,params)
    % YOUR CODE HERE
    m = length(Q(1,:));
    tuning_struct = struct();
    
    for i = 1:m
        tuning_struct(i,1).InitialCondition = x0;
        tuning_struct(i,1).Qdiag = Q(:,i);
        ctrl = LQR(diag(Q(:,i)), eye(params.model.nu), params);
        [x,u,~] = simulate(x0, ctrl, params);
        [s_max, y_max, u_max, J_u, df_max, vf_max, traj_feas] = traj_constraints(x,u,params);
        tuning_struct(i,1).MaxAbsPositionXZ = s_max;
        tuning_struct(i,1).MaxAbsPositionY = y_max;
        tuning_struct(i,1).MaxAbsThrust = u_max;
        tuning_struct(i,1).InputCost = J_u;
        tuning_struct(i,1).MaxFinalPosDiff = df_max;
        tuning_struct(i,1).MaxFinalVelDiff = vf_max;
        tuning_struct(i,1).TrajFeasible = traj_feas;
    end

    feasible_J = zeros(m,1);
    for i = 1:m
        if tuning_struct(i,1).TrajFeasible
            feasible_J(i,1) = tuning_struct(i,1).InputCost;
        end
    end
    if isempty(feasible_J)
        i_opt = nan;
    else
        [~,i_opt] = min(feasible_J);
    end

end